name: Linux Build, Analyze, and Deploy

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

# One place to change version/tag info
env:
  PRE_RELEASE_TAG: "0.1.0-beta"
  PRE_RELEASE_NAME: "0.1.0-beta"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache emsdk
        uses: actions/cache@v4
        with:
          path: emsdk
          key: ${{ runner.os }}-emsdk-${{ hashFiles('emsdk/emsdk_manifest.json') }}
          restore-keys: |
            ${{ runner.os }}-emsdk-

      - name: Setup Emscripten
        run: |
          if [ ! -d "emsdk" ]; then
            git clone https://github.com/emscripten-core/emsdk.git
          fi
          cd emsdk
          ./emsdk install latest
          ./emsdk activate latest
          source ./emsdk_env.sh
        shell: bash

      - name: Build the project
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          echo "Building project for commit: $COMMIT_MESSAGE"
          source ./emsdk/emsdk_env.sh
          make release

      # Zip and upload the build/ directory
      - name: Zip build directory
        run: zip -r build.zip build
        shell: bash

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: build.zip

      - name: Deploy to GitHub Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
          publish_branch: gh-pages

  codeql-analysis:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      matrix:
        language: [ 'cpp', 'javascript' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache emsdk
        uses: actions/cache@v4
        with:
          path: emsdk
          key: ${{ runner.os }}-emsdk-${{ hashFiles('emsdk/emsdk_manifest.json') }}
          restore-keys: |
            ${{ runner.os }}-emsdk-

      - name: Setup Emscripten environment
        run: |
          source ./emsdk/emsdk_env.sh
        shell: bash

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          exclude: |
            emsdk/

      - name: Build project for CodeQL
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          echo "Running CodeQL analysis for commit: $COMMIT_MESSAGE"
          source ./emsdk/emsdk_env.sh
          make

      - name: Perform CodeQL Analysis
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: github/codeql-action/analyze@v3

  prerelease:
    name: "Rolling Prerelease"
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Delete old release (if exists)
        id: delete_release
        uses: cb80/delrel@latest
        with:
          tag: ${{ env.PRE_RELEASE_TAG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Force push the tag to current commit
        run: |
          git tag -f ${{ env.PRE_RELEASE_TAG }}
          git push origin -f ${{ env.PRE_RELEASE_TAG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: .

      - name: Create new rolling prerelease
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.PRE_RELEASE_TAG }}
          name: ${{ env.PRE_RELEASE_NAME }}
          prerelease: true
          body: |
            ## Rolling Prerelease (${{ env.PRE_RELEASE_NAME }})
            **Commit:** ${{ github.sha }}  
            **Date:** ${{ github.event.head_commit.timestamp }}

            **Artifacts:**
            - **build.zip** â€” compiled project for running locally with `python -m http.server`
            - **Souce Code** (zip/tar.gz) - source code for the project

      - name: Upload build.zip
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.PRE_RELEASE_TAG }}
          files: |
            build.zip
